<!DOCTYPE html>
<html lang="en">
<head>
<title>Home | ‡§≠‡§ü‡§ïBot</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700;800&display=swap" rel="stylesheet">
<style>
:root {
--primary: #00d4ff;
--secondary: #7c3aed;
--accent: #f59e0b;
--dark: #0f0f23;
--light: #1a1a2e;
--text-light: #e2e8f0;
--text-muted: #94a3b8;
--panel-bg: rgba(26, 26, 46, 0.92);
--box-bg: rgba(0, 212, 255, 0.08);
--box-hover: rgba(0, 212, 255, 0.18);
--shadow: 0 20px 40px rgba(0,0,0,0.3);
--shadow-hover: 0 30px 60px rgba(0,0,0,0.5);
 }
* { box-sizing: border-box; }
body {
font-family: 'Poppins', sans-serif;
background: linear-gradient(135deg, #0f0f23 0%, #16213e 50%, #1a1a2e 100%);
background-size: 400% 400%;
animation: gradientShift 8s ease infinite;
min-height: 100vh;
margin: 0;
padding: 0;
display: flex;
align-items: center;
justify-content: center;
 }
@keyframes gradientShift {
 0% { background-position: 0% 50%; }
 50% { background-position: 100% 50%; }
 100% { background-position: 0% 50%; }
 }
.main-layout {
display: flex;
width: 90vw;
max-width: 1200px;
height: 80vh;
min-height: 500px;
box-shadow: var(--shadow);
border-radius: 24px;
overflow: hidden;
background: none;
 }
.side-panel {
width: 260px;
min-width: 200px;
background: var(--panel-bg);
display: flex;
flex-direction: column;
align-items: center;
padding: 2.5rem 1.2rem;
gap: 2rem;
border-right: 1.5px solid rgba(0,212,255,0.08);
 }
.side-logo {
font-size: 2rem;
font-weight: 800;
background: linear-gradient(135deg, var(--primary), var(--secondary));
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
background-clip: text;
margin-bottom: 1.5rem;
 }
.side-boxes {
display: flex;
flex-direction: column;
gap: 1.2rem;
width: 100%;
 }
.side-box {
background: var(--box-bg);
border: 1.5px solid rgba(0,212,255,0.13);
border-radius: 14px;
color: var(--text-light);
font-size: 1.1rem;
font-weight: 600;
padding: 1.2rem 0.5rem;
text-align: center;
cursor: pointer;
transition: background 0.2s, box-shadow 0.2s, border 0.2s, color 0.2s;
box-shadow: 0 2px 10px rgba(0,212,255,0.04);
user-select: none;
text-decoration: none;
 }
.side-box:hover {
background: var(--box-hover);
border: 1.5px solid var(--primary);
color: var(--primary);
box-shadow: 0 4px 18px rgba(0,212,255,0.10);
 }
.main-panel {
flex: 1 1 0;
background: var(--panel-bg);
display: flex;
flex-direction: column;
justify-content: flex-start;
padding: 1rem;
overflow-y: auto;
 }
.mic-container {
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
width: 100%;
height: 100%;
 }
.mic-btn {
background: linear-gradient(135deg, var(--primary), var(--secondary));
border: none;
border-radius: 50%;
width: 110px;
height: 110px;
display: flex;
align-items: center;
justify-content: center;
box-shadow: 0 6px 32px rgba(0,212,255,0.18);
cursor: pointer;
transition: transform 0.15s, box-shadow 0.2s;
outline: none;
 }
.mic-btn:hover {
transform: scale(1.07);
box-shadow: 0 10px 40px rgba(124,58,237,0.18);
 }
.mic-btn.recording {
background: linear-gradient(135deg, #ff4444, #ff6b6b);
animation: pulse 1.5s infinite;
 }
@keyframes pulse {
 0% { transform: scale(1); }
 50% { transform: scale(1.1); }
 100% { transform: scale(1); }
 }
.mic-icon {
font-size: 3.5rem;
color: var(--dark);
 }
.mic-label {
margin-top: 1.2rem;
color: var(--text-muted);
font-size: 1.1rem;
font-weight: 500;
 }
.chatbox {
width: 100%;
max-width: none;
flex: 1;
min-height: 350px;
background: rgba(0,212,255,0.04);
border-radius: 18px;
box-shadow: 0 2px 16px rgba(0,212,255,0.06);
display: flex;
flex-direction: column;
padding: 2rem 1.5rem 1.2rem 1.5rem;
position: relative;
animation: fadeIn 0.5s;
height: 100%;
max-height: 100%;
 }
@keyframes fadeIn {
 from { opacity: 0; transform: scale(0.97); }
 to { opacity: 1; transform: scale(1); }
 }
.chat-messages {
flex: 1 1 0;
overflow-y: auto;
margin-bottom: 1.2rem;
color: var(--text-light);
font-size: 1rem;
max-height: 400px;
 }
.message {
margin-bottom: 1rem;
padding: 0.8rem 1rem;
border-radius: 12px;
max-width: 80%;
 }
.message.user {
background: rgba(0,212,255,0.1);
border: 1px solid rgba(0,212,255,0.2);
margin-left: auto;
text-align: right;
 }
.message.ai {
background: rgba(124,58,237,0.1);
border: 1px solid rgba(124,58,237,0.2);
margin-right: auto;
 }
.chat-input-row {
display: flex;
gap: 0.7rem;
 }
.chat-input {
flex: 1 1 0;
border-radius: 8px;
border: 1.5px solid var(--primary);
padding: 0.7rem 1rem;
font-size: 1rem;
background: rgba(0,212,255,0.07);
color: var(--text-light);
outline: none;
 }
.chat-send-btn {
background: linear-gradient(135deg, var(--primary), var(--secondary));
border: none;
border-radius: 8px;
color: var(--dark);
font-weight: 700;
font-size: 1.1rem;
padding: 0.7rem 1.5rem;
cursor: pointer;
transition: background 0.2s, transform 0.1s;
 }
.chat-send-btn:hover {
background: linear-gradient(135deg, var(--secondary), var(--primary));
transform: scale(1.05);
 }
.chat-send-btn:disabled {
opacity: 0.6;
cursor: not-allowed;
 }
.chat-mic-btn {
background: linear-gradient(135deg, var(--primary), var(--secondary));
border: none;
border-radius: 8px;
color: var(--dark);
font-weight: 700;
font-size: 1.1rem;
padding: 0.7rem;
cursor: pointer;
transition: background 0.2s, transform 0.1s;
width: 50px;
display: flex;
align-items: center;
justify-content: center;
 }
.chat-mic-btn:hover {
background: linear-gradient(135deg, var(--secondary), var(--primary));
transform: scale(1.05);
 }
.chat-mic-btn.recording {
background: linear-gradient(135deg, #ff4444, #ff6b6b);
animation: pulse 1.5s infinite;
 }
.chat-mic-icon {
font-size: 1.2rem;
 }
.voice-indicator {
position: absolute;
top: 1rem;
right: 1rem;
background: rgba(255,68,68,0.2);
color: #ff4444;
padding: 0.5rem 1rem;
border-radius: 20px;
font-size: 0.9rem;
font-weight: 600;
display: none;
 }
.voice-indicator.active {
display: block;
animation: pulse 1s infinite;
 }
@media (max-width: 900px) {
.main-layout {
flex-direction: column;
width: 98vw;
height: auto;
min-height: 0;
 }
.side-panel {
flex-direction: row;
width: 100%;
min-width: 0;
border-right: none;
border-bottom: 1.5px solid rgba(0,212,255,0.08);
padding: 1.2rem 0.5rem;
gap: 1.2rem;
justify-content: center;
 }
.side-boxes {
flex-direction: row;
gap: 1rem;
 }
.side-box {
padding: 1rem 0.7rem;
font-size: 1rem;
 }
 }
@media (max-width: 600px) {
.main-layout {
width: 100vw;
min-width: 0;
border-radius: 0;
 }
.container {
border-radius: 0;
 }
 }
</style>
</head>
<body>
<div class="main-layout">
<div class="side-panel">
<div class="side-logo">‡§≠‡§ü‡§ïBot</div>
<div class="side-boxes">
<a href="/chappal" class="side-box">Chappal Mode</a>
<a href="/cab" class="side-box">Call a cab</a>
<a href="/checklist" class="side-box">Checklist Chacha</a>
</div>
</div>
<div class="main-panel">
<div class="mic-container" id="micContainer">
<button class="mic-btn" id="micBtn" aria-label="Start voice chat">
<span class="mic-icon">üé§</span>
</button>
<div class="mic-label">Tap the mic to start chatting</div>
</div>
<div class="chatbox" id="chatBox" style="display:none;">
<div class="voice-indicator" id="voiceIndicator">üé§ Listening...</div>
<div class="chat-messages" id="chatMessages">
</div>
<form class="chat-input-row" id="chatForm" autocomplete="off">
<input class="chat-input" id="chatInput" type="text" placeholder="Type your message..." autocomplete="off" />
<button class="chat-send-btn" type="submit" id="sendBtn">Send</button>
<button class="chat-send-btn" type="button" id="pauseBtn" style="background:#ff5555;" title="Pause Speech">‚è∏</button>
<button class="chat-send-btn" type="button" id="aajiBtn" style="background:#f59e0b;" title="Toggle Aaji Mode">Aaji Mode</button>
<button class="chat-mic-btn" type="button" id="chatMicBtn" title="Voice input">
<span class="chat-mic-icon">üé§</span>
</button>
</form>
</div>
</div>
</div>
<script src="https://cdn.jsdelivr.net/npm/franc-min@5.0.0"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
  const micBtn = document.getElementById('micBtn');
  const micContainer = document.getElementById('micContainer');
  const chatBox = document.getElementById('chatBox');
  const chatForm = document.getElementById('chatForm');
  const chatInput = document.getElementById('chatInput');
  const chatMessages = document.getElementById('chatMessages');
  const sendBtn = document.getElementById('sendBtn');
  const voiceIndicator = document.getElementById('voiceIndicator');
  const chatMicBtn = document.getElementById('chatMicBtn');
  const aajiBtn = document.getElementById('aajiBtn');

  const synth = window.speechSynthesis;
  let aajiMode = false;
  const defaultRate = 1.0;
  const aajiRate = 0.5;
  let currentRate = defaultRate;
  let lastAIMessage = "";
  let userLang = "English";

  let preferredFemaleVoice = null;
  let languageVoiceMap = {};

  function loadVoices() {
  const voices = synth.getVoices();

  function findFemaleVoice(langCode, fallbackName = '') {
    return (
      voices.find(v => v.lang === langCode && /female|woman/i.test(v.name)) ||
      voices.find(v => v.lang === langCode && v.name.includes(fallbackName)) ||
      voices.find(v => v.lang === langCode)
    );
  }

  preferredFemaleVoice = 
    findFemaleVoice('en-US', 'Google UK English Female') ||
    voices.find(v => v.name.includes('English (India)')) ||
    voices.find(v => v.lang.startsWith('en')) ||
    voices[0];

  languageVoiceMap = {
    'English': findFemaleVoice('en-US', 'Google UK English Female'),
    'Hindi': findFemaleVoice('hi-IN'),
    'Marathi': findFemaleVoice('mr-IN'),
    'Gujarati': findFemaleVoice('gu-IN'),
    'Bengali': findFemaleVoice('bn-IN'),
    'Punjabi': findFemaleVoice('pa-IN'),
    'Tamil': findFemaleVoice('ta-IN'),
    'Telugu': findFemaleVoice('te-IN'),
    'Kannada': findFemaleVoice('kn-IN'),
    'Urdu': findFemaleVoice('ur-IN'),
  };
}

  if (speechSynthesis.onvoiceschanged !== undefined) {
    speechSynthesis.onvoiceschanged = loadVoices;
  }
  loadVoices();

  aajiBtn.addEventListener('click', () => {
    aajiMode = !aajiMode;
    currentRate = aajiMode ? aajiRate : defaultRate;
    aajiBtn.textContent = aajiMode ? "Aaji Mode: ON" : "Aaji Mode";
    aajiBtn.style.opacity = aajiMode ? '1' : '0.8';
    if (synth.speaking && lastAIMessage) {
      synth.cancel();
      setTimeout(() => speakText(lastAIMessage), 300);
    }
  });

  function stripEmojis(text) {
    return text.replace(/[\p{Emoji}\uFE0F]/gu, '').replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '');
  }

  function speakText(text) {
    lastAIMessage = text;
    return new Promise((resolve) => {
      if (synth.speaking) synth.cancel();
      const cleanText = stripEmojis(text);
      const utterance = new SpeechSynthesisUtterance(cleanText);
      utterance.rate = currentRate;
      utterance.pitch = aajiMode ? 1.4 : 1;
      utterance.volume = 0.8;
      utterance.voice = languageVoiceMap[userLang] || preferredFemaleVoice;

      utterance.onend = resolve;
      utterance.onerror = resolve;
      console.log(`Speaking [${userLang}] with voice:`, utterance.voice?.name);
      synth.speak(utterance);
    });
  }

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = SpeechRecognition ? new SpeechRecognition() : null;

  if (recognition) {
    recognition.continuous = false;
    recognition.interimResults = true;
    recognition.lang = 'en-US';
    recognition.maxAlternatives = 1;
  }

  let isListening = false;
  let isProcessing = false;

  function initChat() {
    micContainer.style.display = 'none';
    chatBox.style.display = 'flex';
    chatInput.focus();
  }

  function addMessage(content, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user' : 'ai'}`;
    messageDiv.innerHTML = isUser ? content : marked.parse(content);
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function startVoiceInput() {
    if (!recognition) return;
    isListening = true;
    micBtn.classList.add('recording');
    chatMicBtn.classList.add('recording');
    voiceIndicator.classList.add('active');
    recognition.start();
  }

  function stopVoiceInput() {
    isListening = false;
    micBtn.classList.remove('recording');
    chatMicBtn.classList.remove('recording');
    voiceIndicator.classList.remove('active');
    recognition.stop();
  }

  micBtn.addEventListener('click', () => {
    if (!isListening) {
      initChat();
      startVoiceInput();
    } else {
      stopVoiceInput();
    }
  });

  chatMicBtn.addEventListener('click', () => {
    if (!isListening) {
      startVoiceInput();
    } else {
      stopVoiceInput();
    }
  });

  if (recognition) {
    recognition.onresult = (event) => {
      const transcript = Array.from(event.results).map(r => r[0].transcript).join('');
      chatInput.value = transcript;
    };
    recognition.onend = () => {
      if (chatInput.value.trim()) handleSubmit();
      stopVoiceInput();
    };
    recognition.onerror = (event) => {
      addMessage(`Speech recognition error: ${event.error}`, false);
      stopVoiceInput();
    };
  }

  let OPENROUTER_API_KEY = null;
  const OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1";
  const MISTRAL_MODEL = "mistralai/mistral-small-3.2-24b-instruct:free";
  sendBtn.disabled = true;

  async function initializeAPI() {
    try {
      const res = await fetch('/api/config');
      const config = await res.json();
      OPENROUTER_API_KEY = config.openrouterApiKey;
      if (OPENROUTER_API_KEY) sendBtn.disabled = false;
    } catch (err) {
      addMessage("Failed to load API key. Chat will not work.", false);
    }
  }
  initializeAPI();

  async function handleSubmit() {
    const message = chatInput.value.trim();
    if (!message || isProcessing) return;

    isProcessing = true;
    sendBtn.disabled = true;
    chatMicBtn.disabled = true;
    addMessage(message, true);
    chatInput.value = '';

    // Step 1: Detect user input language
    try {
      const langCode = franc.min(message);
      const langMap = {
        'eng': 'English', 'hin': 'Hindi', 'mar': 'Marathi', 'guj': 'Gujarati',
        'ben': 'Bengali', 'pan': 'Punjabi', 'kan': 'Kannada', 'tam': 'Tamil',
        'tel': 'Telugu', 'urd': 'Urdu'
      };
      userLang = langMap[langCode] || 'English';
    } catch {
      userLang = "English";
    }

    try {
      if (!OPENROUTER_API_KEY) throw new Error("API key not loaded");

      const response = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
          "HTTP-Referer": window.location.origin,
          "X-Title": "BhatakBot"
        },
        body: JSON.stringify({
          model: MISTRAL_MODEL,
          messages: [
            {
              role: "system",
              content: `You are ‡§≠‡§ü‡§ïBot, a fun and helpful travel assistant. The user is speaking in ${userLang}. Respond in that same language. Do not translate English queries into Hindi unless explicitly asked. Be concise and casual.`
            },
            {
              role: "user",
              content: message
            }
          ],
          temperature: 0.8,
          max_tokens: 500
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API failed: ${response.statusText}`);
      }

      const result = await response.json();
      const aiResponse = result.choices?.[0]?.message?.content || "Hmm, no reply from the bot.";
      addMessage(aiResponse, false);

      // Step 2: Detect bot reply language for correct voice
      try {
        const langCode = franc.min(aiResponse);
        const langMap = {
          'eng': 'English', 'hin': 'Hindi', 'mar': 'Marathi', 'guj': 'Gujarati',
          'ben': 'Bengali', 'pan': 'Punjabi', 'kan': 'Kannada', 'tam': 'Tamil',
          'tel': 'Telugu', 'urd': 'Urdu'
        };
        userLang = langMap[langCode] || 'English';
      } catch {
        userLang = 'English';
      }

      speakText(aiResponse);

    } catch (error) {
      addMessage("Sorry, something went wrong. Please try again.", false);
    } finally {
      isProcessing = false;
      sendBtn.disabled = false;
      chatMicBtn.disabled = false;
    }
  }

  chatForm.addEventListener('submit', (e) => {
    e.preventDefault();
    handleSubmit();
  });

  chatInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  });

  const pauseBtn = document.getElementById('pauseBtn');
  pauseBtn.addEventListener('click', () => {
    if (synth.speaking) synth.cancel();
  });
</script>


</body>
</html>
